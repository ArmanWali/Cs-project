#include <iostream>
#include <vector>
#include <conio.h>
#include <windows.h>
#include <cstdlib>
#include <utility>
#include <iomanip>
using namespace std;

#define reset "\033[0m"
#define bold "\033[1m"
#define underline "\033[4m"
#define red "\033[31m"
#define green "\033[32m"
#define yellow "\033[33m"
#define inverse "\033[7m"
#define italic "\033[3m"

enum interests{football, excercise, travelling, going_to_the_theater, 
dancing, cooking, politics, pets,
photography, sports, art, learning, music, technology,
video_games, reading, writing, food, nightlife, cat_lover, borad_games, hiking,
spirituality, netflix, fashion, movies, baking, running, swimming};

class friends_request{
    string name;
    public:
    friends_request(string name){
        this->name = name;
    }
    bool accept(){
        bool friends;
        char choice;
        cout<<"\nDo you accept or decline (y/n) : ";
        cin>>choice;
        Beep(600, 200);
        choice = toupper(choice);
        choice == 'Y'? friends= true: friends = false;
        return friends;
    }

    string get_name(){
        return name;
    }

    void display(){
        cout<<"\n-----------------------------------\n";
        cout<<"\033[1;33mName : \033[0m"<<name<<endl;
    }
};

class User{
    string name, password;
    string status;
    string about;
    vector<interests> interest;
    vector<pair<string, string>> messages;
    
    public:
    vector <string> friends;
    vector<friends_request> fr;

    User(string n, string p){
        name = n;
        password = p;
    }

    void send_message(vector<User>& user, string sender_name){
        system("cls");
        string message, name, t_message;
        bool found = false;
        cout<<"Send Message\n__\n\n";
        cout<<"Enter recipent's name : ";
        getline(cin>>ws, name);
        Beep(700, 200);
        for(int i = 0; i < user.size(); i++){
            if(user[i].get_name() == name){
                found = true;
                cout<<"Enter message : ";
                getline(cin>>ws, t_message);
                time_t now = time(nullptr);
                char timestamp[50];
                strftime(timestamp, sizeof(timestamp), "%d/%m/%Y/ %I:%M%p", localtime(&now));
                message = (timestamp);
                message += " " + t_message;
                Beep(700, 200);
                user[i].messages.push_back(make_pair(sender_name, message));
                cout<<"\nMessage Sent!\n";
                Sleep(1000);
                break;
            }
        }
        if(!found){
            cout<<"This username doesn't exist...\n";
            Sleep(1000);
        }
    }

    void message_display(){
        if(messages.empty()){
            cout<<yellow<<bold<<"No new messages have been sent..."<<reset<<endl;
            Sleep(700);
        }
        else{
            cout <<bold<<underline<<"New Messages\n\n"<<reset;
            for (auto &m : messages) {
                cout <<m.second.substr(0, 19)<<endl;
                cout << bold<<m.first<<" says : "<<reset<<m.second.substr(19)<<endl<<endl;                                     
            
            }
            messages.clear(); // Clear the received messages after displaying
        }
            system("PAUSE");
    }
    string get_name(){
        return name;
    }
    string get_password(){
        return password;
    }

    void display(){
        cout<<"\n------------------------------------\n";
        cout<<"Name : "<<name<<endl;
    }
};

bool username_check(string t_name, vector<User> &user){
    bool unique_username = true;
    for(int i = 0; i < user.size(); i++){
        if(t_name == user[i].get_name()){
            unique_username = false;
            break;
        }
    }
    return unique_username;
}

bool login(vector<User>& u, int& index){
    system("cls");
    bool exists = false;
    string t_name;
    int i = 0;
    char password[50];
    cout<<"\n________________\033[1;31mLOGIN PORTAL\033[0m________________\n";
    cout<<"Enter Name : ";
    getline(cin>>ws, t_name);
    Beep(600, 200);
    cout<<"Enter Password : ";
    while(true){
        char ch = _getch();
        if(ch == '\r'){
            password[i] = '\0';
            break;
        }
        else if(ch == '\b' and i>0){
            cout<<"\b \b";
            i--;
        }
        else if(isprint(ch)){
            password[i++] = ch;
            cout<<'*';
        }
    }
    Beep(600, 200);
    cout<<endl;
    for(int i = 0; i< u.size(); i++){
        if(u[i].get_name() == t_name and u[i].get_password()== password){
            exists = true;
            index = i;
            break;
        }
    }
    if(!exists){
        cout<<"\n\033[1;33mIncorrect User Name or Password!\033[0m\n";
        Sleep(1000);
        system("PAUSE");
        
    }
    return exists;
}

void find_user_index(vector<User>&u , const int& index, int j, int&index_2){
    for(int i = 0; i < u.size(); i++){
        if(u[i].get_name() == u[index].fr[j].get_name()){
            index_2 = i;
        }
    }
}

void sign_up(vector<User>& u){
    start:
    system("cls");
    string name;
    char password[50];

    int i = 0;
    cout<<"\n\033[1;31m________________Sign Up Portal________________\033[0m";
    cout<<"\n______________________________________________\n";
    cout<<"Enter Username : ";
    getline(cin>>ws, name);
    Beep(600, 200);
    if(!username_check(name, u)){
        cout<<"\033[1;31mUsername already exists!\033[0m\n";
        Sleep(2000);
        goto start;
    }
    cout<<"Enter Password : ";
    while(true){
        char ch = _getch();
        if(ch == '\r'){
            password[i] = '\0';
            break;
        }
        else if(ch == '\b' and i>0){
            cout<<"\b \b";
            i--;
        }

        else if(isprint(ch)){
            password[i++] = ch;
            cout<<'*';
        }
    }
    Beep(600, 200);
    cout<<endl;
    cout<<"\n\033[1;33mAccount Created Successfully!\033[0m\n\n";
    u.emplace_back(name, password);
    Sleep(1000);
    system("PAUSE");
    Beep(600, 200);
}
void friend_request(vector<User>& user, const string& sender_name, int& index){
    system("cls");

    string t_name;
    bool exists = false;
    bool request_exists = false;
    cout<<green<<underline<<bold<<"Search Name"<<reset<<" : ";
    getline(cin>>ws, t_name);
    Beep(600, 200);
    char choice;

    if(t_name == sender_name){
        cout<<red<<"\nCan't Send A Friend Request To Yourself!\n"<<reset<<endl;
        Sleep(2000);
    }
    else{

      for(int i = 0; i<user.size(); i++){
        if(t_name == user[i].get_name()){
            exists = true;
            for(int j = 0; j < user[i].fr.size(); j++){
                if(user[i].fr[j].get_name() == sender_name){
                    cout<<yellow<<bold<<"Request Has Already Been Sent!\n"<<reset<<endl;
                    Sleep(1500);
                    request_exists = true;
                    break;
                }
            }
            if(request_exists){
                break;
            }
            user[i].display();
                cout<<"\n\033[1;32mSend Friend Request (y/n) : \033[0m";
                cin>>choice;
                Beep(700, 200);
                choice = toupper(choice);
                if(choice== 'Y'){
                   user[i].fr.emplace_back(sender_name);
                   cout<<"\n\033[1;33mRequest Sent!\033[0m\n";
                   Sleep(2000);
                }
                break;  
        }
      }
      if(!exists){
        cout<<"\033[1;31mUsername Not Found...\033[0m";
        Sleep(2000);
        system("cls");
      }
    }    
}

void view_friend_requests(vector<User> &user, const int& index){
    int index_2;
    if(!user[index].fr.empty()){
        for (int i = user[index].fr.size() - 1; i >= 0; i--){
            user[index].fr[i].display();
            if(user[index].fr[i].accept()){
                find_user_index(user, index, i, index_2);
                user[index].friends.push_back(user[index].fr[i].get_name());
                user[index_2].friends.push_back(user[index].get_name());
                user[index].fr.erase(user[index].fr.begin()+i);
                cout<<"\033[1;32mRequest Accepted!\033[0m\n";
            }
            else {
                cout<<red<<bold"Request Declined!\n"<<reset<<endl;
                user[index].fr.erase(user[index].fr.begin()+i);
                Sleep(2000);
            }

        }
        system("PAUSE");
    }
    else{
        cout<<"\033[1;33mYou have no friend requests!\n\033[0m";
        Sleep(1000);
    }
}

void view_friends(vector<User> &user, const int&index){
    system("cls");
    bool unfriend = false;
    char unfriend_choice;
    int f_index;
    string t_name;
    if(user[index].friends.empty()){
        cout<<yellow<<bold<<"No Friends Yet...\n"<<reset<<endl;
    }
    else{
        cout<<"\n\033[1;33mFriends :\033[0m\n";
        for(int i = 0; i < user[index].friends.size(); i++){
            cout<<i+1<<". "<<user[index].friends[i]<<endl;
        }
        cout<<endl;
        cout<<bold<<"Do You Wish To Unfriend Someone ? (Y/N) : "<<reset;
        cin>>unfriend_choice;
        Beep(700, 200);
        unfriend_choice = toupper(unfriend_choice);
        if(unfriend_choice == 'Y'){
            cout<<"Enter Name Of Friend : ";
            getline(cin>>ws, t_name);
            Beep(700, 200);
            for(int i = 0; i < user[index].friends.size(); i++){
                if(user[index].friends[i] == t_name){
                    user[index].friends.erase(user[index].friends.begin()+i);
                    cout<<red<<bold<<t_name<<" was unfriended!"<<reset<<endl;
                    unfriend = true;
                    break;
                }
            }    
            for(int j = 0; j < user.size(); j++){
                if(user[j].get_name() == t_name){
                    f_index = j;
                    break;
                }
            }
            for(int k = 0; k <user[f_index].friends.size(); k++){
                if(user[f_index].friends[k] == user[index].get_name()){
                    user[f_index].friends.erase(user[f_index].friends.begin()+k);
                }
            }

                
        }
        if(!unfriend){
            cout<<bold<<"\nName Not Found...\n"<<reset<<endl;
        }
    }
    system("PAUSE");
    Beep(700, 200);
}

int main(){
    vector<User> v;
    int option;
    int u_option;
    int index;

    do{
        start:
        system("cls");
    for(int i = 0; i<26; i++){
        cout<<char(178);
    }
    cout<<" Social Networking Site ";
    for(int i = 0; i<26; i++){
        cout<<char(178);
    }
    cout<<endl;
    cout<<"\n\t\t\t\t1. Sign Up\n\t\t\t\t2. Login\n\t\t\t\t5. Exit\n";
    cout<<"\nOption# : ";
    cin>>option;
    Beep(600, 200);

    switch(option){
        case 1:
        sign_up(v);
        break;

        case 2:
        if(login(v, index)){ 
            do{
            system("cls"); 
              cout <<bold<<italic<<red<< "Welcome, " << v[index].get_name() << "!" <<reset<< endl;  
              cout << "-------------------------" << endl;
              cout << "1. View Profile" << endl;
              cout << "2. View Friends" << endl;
              cout << "3. Send Friend Request" << endl;
              cout << "4. Send Message" << endl;
              cout << "5. View Message"<<endl;
              cout << "6. View Friend Requests" << endl;
              cout << "7. Logout" << endl;
              cout << "-------------------------" << endl;
              cout << "Option: ";
              cin>>u_option;
              Beep(600, 200);

              switch(u_option){

                case 2:
                 view_friends(v, index);
                 break;
                case 3:
                 friend_request(v, v[index].get_name(), index);
                 break;
                case 4:
                 v[index].send_message(v, v[index].get_name());
                 break;
                case 5:
                 v[index].message_display();
                 break;
                case 6:
                 view_friend_requests(v, index);
                 break;
                case 7:
                 cout<<"\033[1;33mLogged Out Successfully!\n\033[0m";
                 Sleep(1000);
                 goto start;
               }

            }while(u_option != 7);    
        }
        else{
            goto start;
        }
        

        break;

        case 5:
        cout<<"See You Later.....\n";
        break;

        default:
        cout<<red<<bold<<"Type in a Valid Option...\n"<<reset;
        Sleep(1000);
        break;
    }

    }while(option!= 5);
    return 0;
}
