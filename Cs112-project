#include <iostream>
#include <vector>
#include <conio.h>
#include <windows.h>
#include <cstdlib>
#include <utility>
#include <iomanip>
using namespace std;

#define reset "\033[0m"
#define bold "\033[1m"
#define underline "\033[4m"
#define red "\033[31m"
#define green "\033[32m"
#define yellow "\033[33m"
#define inverse "\033[7m"
#define italic "\033[3m"

enum interests{football, excercise, travelling, going_to_the_theater, 
dancing, cooking, politics, pets,
photography, sports, art, learning, music, technology,
video_games, reading, writing, food, nightlife, cat_lover, borad_games, hiking,
spirituality, netflix, fashion, movies, baking, running, swimming};

class friends_request{
    string name;
    public:
    friends_request(string name){
        this->name = name;
    }
    bool accept(){
        bool friends;
        char choice;
        cout<<"\nDo you accept or decline (y/n) : ";
        cin>>choice;
        Beep(600, 200);
        choice = toupper(choice);
        choice == 'Y'? friends= true: friends = false;
        return friends;
    }

    string get_name(){
        return name;
    }

    void display(){
        cout<<"\n-----------------------------------\n";
        cout<<"\033[1;33mName : \033[0m"<<name<<endl;
    }
};

class User{
    string name, password;
    string status;
    string about;
    vector<interests> interest;
    vector<pair<string, string>> messages;
    
    public:
    vector <string> friends;
    vector<friends_request> fr;

    User(string n, string p){
        name = n;
        password = p;
    }

    void send_message(vector<User>& user, string sender_name){
        system("cls");
        string message, name, t_message;
        bool found = false;
        cout<<"Send Message\n__\n\n";
        cout<<"Enter recipent's name : ";
        getline(cin>>ws, name);
        Beep(700, 200);
        for(int i = 0; i < user.size(); i++){
            if(user[i].get_name() == name){
                found = true;
                cout<<"Enter message : ";
                getline(cin>>ws, t_message);
                time_t now = time(nullptr);
                char timestamp[50];
                strftime(timestamp, sizeof(timestamp), "%d/%m/%Y/ %I:%M%p", localtime(&now));
                message = (timestamp);
                message += " " + t_message;
                Beep(700, 200);
                user[i].messages.push_back(make_pair(sender_name, message));
                cout<<"\nMessage Sent!\n";
                Sleep(1000);
                break;
            }
        }
        if(!found){
            cout<<"This username doesn't exist...\n";
            Sleep(1000);
        }
    }

    void message_display(){
        if(messages.empty()){
            cout<<yellow<<bold<<"No new messages have been sent..."<<reset<<endl;
            Sleep(700);
        }
        else{
            cout <<bold<<underline<<"New Messages\n\n"<<reset;
            for (auto &m : messages) {
                cout <<m.second.substr(0, 19)<<endl;
                cout << bold<<m.first<<" says : "<<reset<<m.second.substr(19)<<endl<<endl;                                     
            
            }
            messages.clear(); // Clear the received messages after displaying
        }
            system("PAUSE");
    }
    string get_name(){
        return name;
    }
    string get_password(){
        return password;
    }

    void display(){
        cout<<"\n------------------------------------\n";
        cout<<"Name : "<<name<<endl;
    }
};
